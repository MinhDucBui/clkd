# @package _global_

# specify here default training configuration
defaults:

  # Training Setup
  - trainer: default.yaml

  # Teacher
  - teacher: default

  # General Student Configs (e.g. Embedding and weight sharing)
  - students: default

  # Define (Train/Val) Datamodule
  - datamodule@datamodule.train: cc100.yaml
  - datamodule@datamodule.val: tatoeba.yaml

  # Utils
  - callbacks: none.yaml # set this to null if you don't want to use callbacks
  - logger: tensorboard # set logger here or use command line (e.g. `python run.py logger=wandb`)
  - experiment: null
  - hydra: default.yaml

  # enable color logging
  - override hydra/hydra_logging: colorlog
  - override hydra/job_logging: colorlog

students:
  individual:
    # Naming convention: student_{UniqueName} e.g. student_0 or student_zero.
    # Order is determined by order of listed item
    student_0:
      languages: [ "cs", "sl" ]

  weight_sharing_across_students: false
  # Naming convention: ( ( {Student Name}, {Layer Number} ), ( {Student Name}, {Layer Number}) )
  # E.g. false or
  # - ((student_0, 1), (student_1, 1))
  # - ((student_0, 6), (student_1, 5))
  # Note: Embedding sharing is not allowed with this key (see key 'embed_sharing')

  embed_sharing: "in_each_model"
  # E.g. "in_each_model" <-> Share embeddings between languages in each model
  # E.g. "in_overlapping_language" <-> Share embeddings between overlapping languages across models
  # E.g.
  # - ((student_1, ss), (student_0, ss))

  evaluation:
    # Can also use 'teacher' as model name: Evaluate with teacher

    #retrieval: null
    retrieval:
      evaluate_with:  # E.g. ((student_0, en), (student_0, ht))
        - ((student_0, cs), (student_0, sl))

    # mlm: null
    mlm:
      aggregate: false  # If multiple model-language available, then aggregate metrics or calculate separately
      evaluate_with:  # E.g. ((student_0, en), (student_0, ht)) <-> Using parallel data or (student_0, en) <-> not using parallel data
        - ((student_0, cs), (student_0, sl))


datamodule:
  val:
    max_length: 300
    batch_size: 1
  train:
    batch_size: 1

trainer:
  log_every_n_steps: 10
  val_check_interval: 1000
  max_steps: 100000
  gpus: 1


# Random Seed
seed: 42

# path to original working directory
# hydra hijacks working directory by changing it to the current log directory,
# so it's useful to have this path as a special variable
# learn more here: https://hydra.cc/docs/next/tutorials/basic/running_your_app/working_directory
work_dir: ${hydra:runtime.cwd}

# path to folder with data
data_dir: ${work_dir}/data/

# Path to CC100 Folder for MLM pretraining
cc: ${data_dir}/cc100

# Path to JW300 Folder for MLM Validation
jw300: ${data_dir}/jw300

# use `python run.py debug=true` for easy debugging!
# this will run 1 train, val and test loop with only 1 batch
# equivalent to running `python run.py trainer.fast_dev_run=true`
# (this is placed here just for easier access from command line)
debug: False

# pretty print config at the start of the run using Rich library
print_config: True

# disable python warnings if they annoy you
ignore_warnings: True

# check performance on test set, using the best model achieved during training
# lightning chooses best model based on metric specified in checkpoint callback
test_on_downstream_task: True
