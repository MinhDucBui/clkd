# @package _global_

# specify here default training configuration
defaults:

  # Training Setup
  - train: default.yaml
  - train/trainer: default.yaml
  - train/optimizer: adamw.yaml
  - train/lr_scheduler: linear_warmup.yaml
  - train/loss: kdloss.yaml

    # Distillation Setup
  - distillation: bilingual.yaml

    # Validation
  - evaluation: mlm.yaml

  # Teacher and Student Model
  - model@teacher: automodel.yaml
  - model@student: automodel.yaml

  # Define Datamodule
  - datamodule: cc100.yaml

  # Utils
  - callbacks: none.yaml # set this to null if you don't want to use callbacks
  - logger: tensorboard # set logger here or use command line (e.g. `python run.py logger=wandb`)
  - experiment: null
  - hydra: default.yaml

  # enable color logging
  - override hydra/hydra_logging: colorlog
  - override hydra/job_logging: colorlog

#teacher:
#  model:
#    pretrained_model_name_or_path: "distilbert-base-multilingual-cased"

student:
  model:
    use_pretrained_weights: false
  tokenizer: ${teacher.tokenizer}

distillation:
  s_lang: ["ss"]
  t_lang: ["ht", "mn"]

train:
  batch_size: 3
  total_steps: 40
  trainer:
    log_every_n_steps: 1
    val_check_interval: 10
    gpus: 0


# Random Seed
seed: 42

# path to original working directory
# hydra hijacks working directory by changing it to the current log directory,
# so it's useful to have this path as a special variable
# learn more here: https://hydra.cc/docs/next/tutorials/basic/running_your_app/working_directory
work_dir: ${hydra:runtime.cwd}

# path to folder with data
data_dir: ${work_dir}/data/

# Path to CC100 Folder for MLM pretraining
cc: ${data_dir}/cc100

# use `python run.py debug=true` for easy debugging!
# this will run 1 train, val and test loop with only 1 batch
# equivalent to running `python run.py trainer.fast_dev_run=true`
# (this is placed here just for easier access from command line)
debug: False

# pretty print config at the start of the run using Rich library
print_config: True

# disable python warnings if they annoy you
ignore_warnings: True

# check performance on test set, using the best model achieved during training
# lightning chooses best model based on metric specified in checkpoint callback
test_on_downstream_task: True
